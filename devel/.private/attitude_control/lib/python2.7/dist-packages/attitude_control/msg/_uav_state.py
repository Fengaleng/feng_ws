# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from attitude_control/uav_state.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class uav_state(genpy.Message):
  _md5sum = "f9313a03a91ff0a9c49a7d3dc8670c6b"
  _type = "attitude_control/uav_state"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# state
geometry_msgs/Vector3 position_W
geometry_msgs/Vector3 velocity_W
geometry_msgs/Vector3 euler_angle
geometry_msgs/Vector3 rotation_speed_B

# control
float64 commanded_thrust
geometry_msgs/Vector3 moment

# ref trajectory
geometry_msgs/Vector3 position_ref
geometry_msgs/Vector3 velocity_ref
geometry_msgs/Vector3 accel_ref
float64 yaw_ref
float64 speed
bool launch_flag

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','position_W','velocity_W','euler_angle','rotation_speed_B','commanded_thrust','moment','position_ref','velocity_ref','accel_ref','yaw_ref','speed','launch_flag']
  _slot_types = ['std_msgs/Header','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,position_W,velocity_W,euler_angle,rotation_speed_B,commanded_thrust,moment,position_ref,velocity_ref,accel_ref,yaw_ref,speed,launch_flag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(uav_state, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position_W is None:
        self.position_W = geometry_msgs.msg.Vector3()
      if self.velocity_W is None:
        self.velocity_W = geometry_msgs.msg.Vector3()
      if self.euler_angle is None:
        self.euler_angle = geometry_msgs.msg.Vector3()
      if self.rotation_speed_B is None:
        self.rotation_speed_B = geometry_msgs.msg.Vector3()
      if self.commanded_thrust is None:
        self.commanded_thrust = 0.
      if self.moment is None:
        self.moment = geometry_msgs.msg.Vector3()
      if self.position_ref is None:
        self.position_ref = geometry_msgs.msg.Vector3()
      if self.velocity_ref is None:
        self.velocity_ref = geometry_msgs.msg.Vector3()
      if self.accel_ref is None:
        self.accel_ref = geometry_msgs.msg.Vector3()
      if self.yaw_ref is None:
        self.yaw_ref = 0.
      if self.speed is None:
        self.speed = 0.
      if self.launch_flag is None:
        self.launch_flag = False
    else:
      self.header = std_msgs.msg.Header()
      self.position_W = geometry_msgs.msg.Vector3()
      self.velocity_W = geometry_msgs.msg.Vector3()
      self.euler_angle = geometry_msgs.msg.Vector3()
      self.rotation_speed_B = geometry_msgs.msg.Vector3()
      self.commanded_thrust = 0.
      self.moment = geometry_msgs.msg.Vector3()
      self.position_ref = geometry_msgs.msg.Vector3()
      self.velocity_ref = geometry_msgs.msg.Vector3()
      self.accel_ref = geometry_msgs.msg.Vector3()
      self.yaw_ref = 0.
      self.speed = 0.
      self.launch_flag = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_27dB().pack(_x.position_W.x, _x.position_W.y, _x.position_W.z, _x.velocity_W.x, _x.velocity_W.y, _x.velocity_W.z, _x.euler_angle.x, _x.euler_angle.y, _x.euler_angle.z, _x.rotation_speed_B.x, _x.rotation_speed_B.y, _x.rotation_speed_B.z, _x.commanded_thrust, _x.moment.x, _x.moment.y, _x.moment.z, _x.position_ref.x, _x.position_ref.y, _x.position_ref.z, _x.velocity_ref.x, _x.velocity_ref.y, _x.velocity_ref.z, _x.accel_ref.x, _x.accel_ref.y, _x.accel_ref.z, _x.yaw_ref, _x.speed, _x.launch_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position_W is None:
        self.position_W = geometry_msgs.msg.Vector3()
      if self.velocity_W is None:
        self.velocity_W = geometry_msgs.msg.Vector3()
      if self.euler_angle is None:
        self.euler_angle = geometry_msgs.msg.Vector3()
      if self.rotation_speed_B is None:
        self.rotation_speed_B = geometry_msgs.msg.Vector3()
      if self.moment is None:
        self.moment = geometry_msgs.msg.Vector3()
      if self.position_ref is None:
        self.position_ref = geometry_msgs.msg.Vector3()
      if self.velocity_ref is None:
        self.velocity_ref = geometry_msgs.msg.Vector3()
      if self.accel_ref is None:
        self.accel_ref = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 217
      (_x.position_W.x, _x.position_W.y, _x.position_W.z, _x.velocity_W.x, _x.velocity_W.y, _x.velocity_W.z, _x.euler_angle.x, _x.euler_angle.y, _x.euler_angle.z, _x.rotation_speed_B.x, _x.rotation_speed_B.y, _x.rotation_speed_B.z, _x.commanded_thrust, _x.moment.x, _x.moment.y, _x.moment.z, _x.position_ref.x, _x.position_ref.y, _x.position_ref.z, _x.velocity_ref.x, _x.velocity_ref.y, _x.velocity_ref.z, _x.accel_ref.x, _x.accel_ref.y, _x.accel_ref.z, _x.yaw_ref, _x.speed, _x.launch_flag,) = _get_struct_27dB().unpack(str[start:end])
      self.launch_flag = bool(self.launch_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_27dB().pack(_x.position_W.x, _x.position_W.y, _x.position_W.z, _x.velocity_W.x, _x.velocity_W.y, _x.velocity_W.z, _x.euler_angle.x, _x.euler_angle.y, _x.euler_angle.z, _x.rotation_speed_B.x, _x.rotation_speed_B.y, _x.rotation_speed_B.z, _x.commanded_thrust, _x.moment.x, _x.moment.y, _x.moment.z, _x.position_ref.x, _x.position_ref.y, _x.position_ref.z, _x.velocity_ref.x, _x.velocity_ref.y, _x.velocity_ref.z, _x.accel_ref.x, _x.accel_ref.y, _x.accel_ref.z, _x.yaw_ref, _x.speed, _x.launch_flag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.position_W is None:
        self.position_W = geometry_msgs.msg.Vector3()
      if self.velocity_W is None:
        self.velocity_W = geometry_msgs.msg.Vector3()
      if self.euler_angle is None:
        self.euler_angle = geometry_msgs.msg.Vector3()
      if self.rotation_speed_B is None:
        self.rotation_speed_B = geometry_msgs.msg.Vector3()
      if self.moment is None:
        self.moment = geometry_msgs.msg.Vector3()
      if self.position_ref is None:
        self.position_ref = geometry_msgs.msg.Vector3()
      if self.velocity_ref is None:
        self.velocity_ref = geometry_msgs.msg.Vector3()
      if self.accel_ref is None:
        self.accel_ref = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 217
      (_x.position_W.x, _x.position_W.y, _x.position_W.z, _x.velocity_W.x, _x.velocity_W.y, _x.velocity_W.z, _x.euler_angle.x, _x.euler_angle.y, _x.euler_angle.z, _x.rotation_speed_B.x, _x.rotation_speed_B.y, _x.rotation_speed_B.z, _x.commanded_thrust, _x.moment.x, _x.moment.y, _x.moment.z, _x.position_ref.x, _x.position_ref.y, _x.position_ref.z, _x.velocity_ref.x, _x.velocity_ref.y, _x.velocity_ref.z, _x.accel_ref.x, _x.accel_ref.y, _x.accel_ref.z, _x.yaw_ref, _x.speed, _x.launch_flag,) = _get_struct_27dB().unpack(str[start:end])
      self.launch_flag = bool(self.launch_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_27dB = None
def _get_struct_27dB():
    global _struct_27dB
    if _struct_27dB is None:
        _struct_27dB = struct.Struct("<27dB")
    return _struct_27dB
