// Generated by gencpp from file attitude_control/min_snap_traj.msg
// DO NOT EDIT!


#ifndef ATTITUDE_CONTROL_MESSAGE_MIN_SNAP_TRAJ_H
#define ATTITUDE_CONTROL_MESSAGE_MIN_SNAP_TRAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace attitude_control
{
template <class ContainerAllocator>
struct min_snap_traj_
{
  typedef min_snap_traj_<ContainerAllocator> Type;

  min_snap_traj_()
    : header()
    , position_ref()
    , velocity_ref()
    , accel_ref()
    , yaw_ref()
    , launch_flag(false)  {
      yaw_ref.assign(0.0);
  }
  min_snap_traj_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , position_ref(_alloc)
    , velocity_ref(_alloc)
    , accel_ref(_alloc)
    , yaw_ref()
    , launch_flag(false)  {
  (void)_alloc;
      yaw_ref.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_ref_type;
  _position_ref_type position_ref;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_ref_type;
  _velocity_ref_type velocity_ref;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accel_ref_type;
  _accel_ref_type accel_ref;

   typedef boost::array<double, 3>  _yaw_ref_type;
  _yaw_ref_type yaw_ref;

   typedef uint8_t _launch_flag_type;
  _launch_flag_type launch_flag;





  typedef boost::shared_ptr< ::attitude_control::min_snap_traj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::attitude_control::min_snap_traj_<ContainerAllocator> const> ConstPtr;

}; // struct min_snap_traj_

typedef ::attitude_control::min_snap_traj_<std::allocator<void> > min_snap_traj;

typedef boost::shared_ptr< ::attitude_control::min_snap_traj > min_snap_trajPtr;
typedef boost::shared_ptr< ::attitude_control::min_snap_traj const> min_snap_trajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::attitude_control::min_snap_traj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::attitude_control::min_snap_traj_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::attitude_control::min_snap_traj_<ContainerAllocator1> & lhs, const ::attitude_control::min_snap_traj_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.position_ref == rhs.position_ref &&
    lhs.velocity_ref == rhs.velocity_ref &&
    lhs.accel_ref == rhs.accel_ref &&
    lhs.yaw_ref == rhs.yaw_ref &&
    lhs.launch_flag == rhs.launch_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::attitude_control::min_snap_traj_<ContainerAllocator1> & lhs, const ::attitude_control::min_snap_traj_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace attitude_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::attitude_control::min_snap_traj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::attitude_control::min_snap_traj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::attitude_control::min_snap_traj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::attitude_control::min_snap_traj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::attitude_control::min_snap_traj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::attitude_control::min_snap_traj_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::attitude_control::min_snap_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d04aef5adebadf0e66bcb0fbc43cb67";
  }

  static const char* value(const ::attitude_control::min_snap_traj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d04aef5adebadf0ULL;
  static const uint64_t static_value2 = 0xe66bcb0fbc43cb67ULL;
};

template<class ContainerAllocator>
struct DataType< ::attitude_control::min_snap_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "attitude_control/min_snap_traj";
  }

  static const char* value(const ::attitude_control::min_snap_traj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::attitude_control::min_snap_traj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# references\n"
"geometry_msgs/Vector3 position_ref\n"
"geometry_msgs/Vector3 velocity_ref\n"
"geometry_msgs/Vector3 accel_ref\n"
"float64[3] yaw_ref\n"
"bool launch_flag\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::attitude_control::min_snap_traj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::attitude_control::min_snap_traj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.position_ref);
      stream.next(m.velocity_ref);
      stream.next(m.accel_ref);
      stream.next(m.yaw_ref);
      stream.next(m.launch_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct min_snap_traj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::attitude_control::min_snap_traj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::attitude_control::min_snap_traj_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position_ref: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position_ref);
    s << indent << "velocity_ref: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity_ref);
    s << indent << "accel_ref: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accel_ref);
    s << indent << "yaw_ref[]" << std::endl;
    for (size_t i = 0; i < v.yaw_ref.size(); ++i)
    {
      s << indent << "  yaw_ref[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.yaw_ref[i]);
    }
    s << indent << "launch_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.launch_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATTITUDE_CONTROL_MESSAGE_MIN_SNAP_TRAJ_H
